// <auto-generated />
using System;
using Blog.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250212052151_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Blog.Api.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f631b09-0d4d-4c3a-ae57-6f0b33b764af"),
                            Name = "Web Development",
                            Slug = "web-development"
                        },
                        new
                        {
                            Id = new Guid("2c631b09-0d4d-4c3a-ae57-6f0b33b764bf"),
                            Name = "Cloud Computing",
                            Slug = "cloud-computing"
                        },
                        new
                        {
                            Id = new Guid("3d631b09-0d4d-4c3a-ae57-6f0b33b764cf"),
                            Name = "DevOps",
                            Slug = "devops"
                        });
                });

            modelBuilder.Entity("Blog.Api.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e631b09-0d4d-4c3a-ae57-6f0b33b764df"),
                            Author = "John Doe",
                            Content = "# Getting Started with ASP.NET Core\r\n\r\n## Introduction\r\n\r\nASP.NET Core is a cross-platform, high-performance framework for building modern, cloud-enabled applications.\r\n\r\n### Prerequisites\r\n\r\n- .NET SDK\r\n- Visual Studio or VS Code\r\n- Basic C# knowledge\r\n\r\n## Getting Started\r\n\r\nFirst, let's create a new project:\r\n\r\n```csharp\r\ndotnet new webapi -n MyFirstAPI\r\n```\r\n\r\n### Key Features\r\n\r\n1. **Cross-Platform Support**\r\n   - Run on Windows, Linux, and macOS\r\n   - Deploy anywhere\r\n\r\n2. **Built-in Dependency Injection**\r\n   - Clean architecture\r\n   - Testable code\r\n\r\n## Next Steps\r\n\r\nStay tuned for more advanced topics!",
                            IsPublished = true,
                            PublishedDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "A comprehensive guide to building web applications with ASP.NET Core",
                            Slug = "getting-started-with-aspnet-core",
                            ThumbnailUrl = "https://placeholder.com/aspnet-core.jpg",
                            Title = "Getting Started with ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("6f631b09-0d4d-4c3a-ae57-6f0b33b764ef"),
                            Author = "Jane Smith",
                            Content = "# Cloud Deployment Strategies\r\n\r\n## Understanding Cloud Deployment\r\n\r\nCloud deployment requires careful planning and consideration of various factors.\r\n\r\n### Common Deployment Models\r\n\r\n#### 1. Blue-Green Deployment\r\n\r\nThis strategy reduces downtime and risk by running two identical environments:\r\n\r\n- Blue environment (current)\r\n- Green environment (new version)\r\n\r\n#### 2. Canary Deployment\r\n\r\nGradually roll out changes to a small subset of users before full deployment.\r\n\r\n## Best Practices\r\n\r\n- Always backup your data\r\n- Use infrastructure as code\r\n- Implement proper monitoring\r\n\r\n### Conclusion\r\n\r\nChoose the right strategy based on your specific needs and requirements.",
                            IsPublished = true,
                            PublishedDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Learn different approaches to deploying applications in the cloud",
                            Slug = "cloud-deployment-strategies",
                            ThumbnailUrl = "https://placeholder.com/cloud-deployment.jpg",
                            Title = "Cloud Deployment Strategies"
                        });
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");

                    b.HasData(
                        new
                        {
                            CategoriesId = new Guid("1f631b09-0d4d-4c3a-ae57-6f0b33b764af"),
                            PostsId = new Guid("5e631b09-0d4d-4c3a-ae57-6f0b33b764df")
                        },
                        new
                        {
                            CategoriesId = new Guid("2c631b09-0d4d-4c3a-ae57-6f0b33b764bf"),
                            PostsId = new Guid("5e631b09-0d4d-4c3a-ae57-6f0b33b764df")
                        },
                        new
                        {
                            CategoriesId = new Guid("2c631b09-0d4d-4c3a-ae57-6f0b33b764bf"),
                            PostsId = new Guid("6f631b09-0d4d-4c3a-ae57-6f0b33b764ef")
                        },
                        new
                        {
                            CategoriesId = new Guid("3d631b09-0d4d-4c3a-ae57-6f0b33b764cf"),
                            PostsId = new Guid("6f631b09-0d4d-4c3a-ae57-6f0b33b764ef")
                        });
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("Blog.Api.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Api.Domain.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
